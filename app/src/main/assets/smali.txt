_
01 move vx,vy
01 ??
_
02 move/from16 vx,vy
02 ?? ?? ??
_
03 move/16
03 ??
_
04 move-wide
04 ??
_
05 move-wide/from16 vx,vy
05 ?? ?? ??
_
06 move-wide/16
06 ??
_
07 move-object vx,vy
07 ??
_
08 move-object/from16 vx,vy
08 ?? ?? ??
_
09 move-object/16
09 ??
_
0A move-result vx
0A ??
_
0B move-result-wide vx
0B ??
_
0C move-result-object vx
0C ??
_
0D move-exception vx
0D ??
_
0E return-void
0E ??
_
0F return vx
0F ??
_
10 return-wide vx
10 ??
_
11 return-object vx
11 ??
_
12 const/4 vx,lit4
12 ??
_
13 const/16 vx,lit16
13 ?? ?? ??
_
14 const vx,lit32
14 ?? ?? ?? ?? ??
_
15 const/high16 v0,lit16
15 ?? ?? ??
_
16 const-wide/16 vx,lit16
16 ?? ?? ??
_
17 const-wide/32 vx,lit32
17 ?? ?? ?? ?? ??
_
18 const-wide vx,lit64
18 ?? ?? ?? ?? ?? ?? ?? ?? ??
_
19 const-wide/high16 vx,lit16
19 ?? ?? ??
_
1A const-string vx,string_id
1A ?? ?? ??
_
1B const-string-jumbo
1B ??
_
1C const-class vx,type_id
1C ?? ?? ??
_
1D monitor-enter vx
1D ??
_
1E monitor-exit
1E ??
_
1F check-cast vx,type_id
1F ?? ?? ??
_
20 instance-of vx,vy,type_id
20 ?? ?? ??
_
21 array-length vx,vy
21 ??
_
22 new-instance vx,type
22 ?? ?? ??
_
23 new-array vx,vy,type_id
23 ?? ?? ??
_
24 filled-new-array
24 ?? ?? ?? ?? ??
_
25 filled-new-array-range
25 ?? ?? ?? ?? ??
_
26 fill-array-data
26 ?? ?? ?? ?? ??
_
27 throw vx
27 ??
_
28 goto target
28 ??
_
29 goto/16 target
29 ?? ?? ??
_
2A goto/32 target
2A ??
_
2B packed-switch vx,table
2B ?? ?? ?? ?? ??
_
2C sparse-switch vx,table
2C ?? ?? ?? ?? ??
_
2D cmpl-float
2D ?? ?? ??
_
2E cmpg-float vx,vy,vz
2E ?? ?? ??
_
2F cmpl-double vx,vy,vz
2F ?? ?? ??
_
30 cmpg-double vx,vy,vz
30 ?? ?? ??
_
31 cmp-long vx,vy,vz
31 ?? ?? ??
_
32 if-eq vx,vy,target
32 ?? ?? ??
_
33 if-ne vx,vy,target
33 ?? ?? ??
_
34 if-lt vx,vy,target
34 ?? ?? ??
_
35 if-ge vx,vy,target
35 ?? ?? ??
_
36 if-gt vx,vy,target
36 ?? ?? ??
_
37 if-le vx,vy,target
37 ?? ?? ??
_
38 if-eqz vx,target
38 ?? ?? ??
_
39 if-nez vx,target
39 ?? ?? ??
_
3A if-ltz vx,target
3A ?? ?? ??
_
3B if-gez vx,target
3B ?? ?? ??
_
3C if-gtz vx,target
3C ?? ?? ??
_
3D if-lez vx,target
3D ?? ?? ??
_
44 aget vx,vy,vz
44 ?? ?? ??
_
45 aget-wide vx,vy,vz
45 ?? ?? ??
_
46 aget-object vx,vy,vz
46 ?? ?? ??
_
47 aget-boolean vx,vy,vz
47 ?? ?? ??
_
48 aget-byte vx,vy,vz
48 ?? ?? ??
_
49 aget-char vx,vy,vz
49 ?? ?? ??
_
4A aget-short vx,vy,vz
4A ?? ?? ??
_
4B aput vx,vy,vz
4B ?? ?? ??
_
4C aput-wide vx,vy,vz
4C ?? ?? ??
_
4D aput-object vx,vy,vz
4D ?? ?? ??
_
4E aput-boolean vx,vy,vz
4E ?? ?? ??
_
4F aput-byte vx,vy,vz
4F ?? ?? ??
_
50 aput-char vx,vy,vz
50 ?? ?? ??
_
51 aput-short vx,vy,vz
51 ?? ?? ??
_
52 iget vx,vy,field_id
52 ?? ?? ??
_
53 iget-wide vx,vy,field_id
53 ?? ?? ??
_
54 iget-object vx,vy,field_id
54 ?? ?? ??
_
55 iget-boolean vx,vy,field_id
55 ?? ?? ??
_
56 iget-byte vx,vy,field_id
56 ?? ?? ??
_
57 iget-char vx,vy,field_id
57 ?? ?? ??
_
58 iget-short vx,vy,field_id
58 ?? ?? ??
_
59 iput vx,vy,field_id
59 ?? ?? ??
_
5A iput-wide vx,vy,field_id
5A ?? ?? ??
_
5B iput-object vx,vy,field_id
5B ?? ?? ??
_
5C iput-boolean vx,vy,field_id
5C ?? ?? ??
_
5D iput-byte vx,vy,field_id
5D ?? ?? ??
_
5E iput-char vx,vy,field_id
5E ?? ?? ??
_
5F iput-short vx,vy,field_id
5F ?? ?? ??
_
60 sget vx,field_id
60 ?? ?? ??
_
61 sget-wide vx,field_id
61 ?? ?? ??
_
62 sget-object vx,field_id
62 ?? ?? ??
_
63 sget-boolean vx,field_id
63 ?? ?? ??
_
64 sget-byte vx,field_id
64 ?? ?? ??
_
65 sget-char vx,field_id
65 ?? ?? ??
_
66 sget-short vx,field_id
66 ?? ?? ??
_
67 sput vx,field_id
67 ?? ?? ??
_
68 sput-wide vx,field_id
68 ?? ?? ??
_
69 sput-object vx,field_id
69 ?? ?? ??
_
6A sput-boolean vx,field_id
6A ?? ?? ??
_
6B sput-byte vx,field_id
6B ?? ?? ??
_
6C sput-char vx,field_id
6C ?? ?? ??
_
6D sput-short vx,field_id
6D ?? ?? ??
_
6E invoke-virtual { parameters
6E ?? ?? ?? ?? ??
_
6F invoke-super
6F ?? ?? ?? ?? ??
_
70 invoke-direct
70 ?? ?? ?? ?? ??
_
71 invoke-static {parameters},
71 ?? ?? ?? ?? ??
_
72 invoke-interface
72 ?? ?? ?? ?? ??
_
73 unused
73 ??
_
74 invoke-virtual/range
74 ?? ?? ?? ?? ??
_
75 invoke-super/range
75 ?? ?? ?? ?? ??
_
76 invoke-direct/range
76 ?? ?? ?? ?? ??
_
77 invoke-static/range
77 ?? ?? ?? ?? ??
_
78 invoke-interface-range
78 ?? ?? ?? ?? ??
_
79 unused
79 ??
_
7A unused
7A ??
_
7B neg-int vx,vy
7B ??
_
7C not-int vx,vy
7C ??
_
7D neg-long vx,vy
7D ??
_
7E not-long vx,vy
7E ??
_
7F neg-float vx,vy
7F ??
_
80 neg-double vx,vy
80 ??
_
81 int-to-long vx,vy
81 ??
_
82 int-to-float vx,vy
82 ??
_
83 int-to-double vx,vy
83 ??
_
84 long-to-int vx,vy
84 ??
_
85 long-to-float vx,vy
85 ??
_
86 long-to-double vx,vy
86 ??
_
87 float-to-int vx,vy
87 ??
_
88 float-to-long vx,vy
88 ??
_
89 float-to-double vx,vy
89 ??
_
8A double-to-int vx,vy
8A ??
_
8B double-to-long vx,vy
8B ??
_
8C double-to-float vx,vy
8C ??
_
8D int-to-byte vx,vy
8D ??
_
8E int-to-char vx,vy
8E ??
_
8F int-to-short vx,vy
8F ??
_
90 add-int vx,vy,vz
90 ?? ?? ??
_
91 sub-int vx,vy,vz
91 ?? ?? ??
_
92 mul-int vx,vy,vz
92 ?? ?? ??
_
93 div-int vx,vy,vz
93 ?? ?? ??
_
94 rem-int vx,vy,vz
94 ?? ?? ??
_
95 and-int vx,vy,vz
95 ?? ?? ??
_
96 or-int vx,vy,vz
96 ?? ?? ??
_
97 xor-int vx,vy,vz
97 ?? ?? ??
_
98 shl-int vx,vy,vz
98 ?? ?? ??
_
99 shr-int vx,vy,vz
99 ?? ?? ??
_
9A ushr-int vx,vy,vz
9A ?? ?? ??
_
9B add-long vx,vy,vz
9B ?? ?? ??
_
9C sub-long vx,vy,vz
9C ?? ?? ??
_
9D mul-long vx,vy,vz
9D ?? ?? ??
_
9E div-long vx,vy,vz
9E ?? ?? ??
_
9F rem-long vx,vy,vz
9F ?? ?? ??
_
A0 and-long vx,vy,vz
A0 ?? ?? ??
_
A1 or-long vx,vy,vz
A1 ?? ?? ??
_
A2 xor-long vx,vy,vz
A2 ?? ?? ??
_
A3 shl-long vx,vy,vz
A3 ?? ?? ??
_
A4 shr-long vx,vy,vz
A4 ?? ?? ??
_
A5 ushr-long vx,vy,vz
A5 ?? ?? ??
_
A6 add-float vx,vy,vz
A6 ?? ?? ??
_
A7 sub-float vx,vy,vz
A7 ?? ?? ??
_
A8 mul-float vx,vy,vz
A8 ?? ?? ??
_
A9 div-float vx,vy,vz
A9 ?? ?? ??
_
AA rem-float vx,vy,vz
AA ?? ?? ??
_
AB add-double vx,vy,vz
AB ?? ?? ??
_
AC sub-double vx,vy,vz
AC ?? ?? ??
_
AD mul-double vx,vy,vz
AD ?? ?? ??
_
AE div-double vx,vy,vz
AE ?? ?? ??
_
AF rem-double vx,vy,vz
AF ?? ?? ??
_
B0 add-int/2addr vx,vy
B0 ??
_
B1 sub-int/2addr vx,vy
B1 ??
_
B2 mul-int/2addr vx,vy
B2 ??
_
B3 div-int/2addr vx,vy
B3 ??
_
B4 rem-int/2addr vx,vy
B4 ??
_
B5 and-int/2addr vx,vy
B5 ??
_
B6 or-int/2addr vx,vy
B6 ??
_
B7 xor-int/2addr vx,vy
B7 ??
_
B8 shl-int/2addr vx,vy
B8 ??
_
B9 shr-int/2addr vx,vy
B9 ??
_
BA ushr-int/2addr vx,vy
BA ??
_
BB add-long/2addr vx,vy
BB ??
_
BC sub-long/2addr vx,vy
BC ??
_
BD mul-long/2addr vx,vy
BD ??
_
BE div-long/2addr vx,vy
BE ??
_
BF rem-long/2addr vx,vy
BF ??
_
C0 and-long/2addr vx,vy
C0 ??
_
C1 or-long/2addr vx,vy
C1 ??
_
C2 xor-long/2addr vx,vy
C2 ??
_
C3 shl-long/2addr vx,vy
C3 ??
_
C4 shr-long/2addr vx,vy
C4 ??
_
C5 ushr-long/2addr vx,vy
C5 ??
_
C6 add-float/2addr vx,vy
C6 ??
_
C7 sub-float/2addr vx,vy
C7 ??
_
C8 mul-float/2addr vx,vy
C8 ??
_
C9 div-float/2addr vx,vy
C9 ??
_
CA rem-float/2addr vx,vy
CA ??
_
CB add-double/2addr vx,vy
CB ??
_
CC sub-double/2addr vx,vy
CC ??
_
CD mul-double/2addr vx,vy
CD ??
_
CE div-double/2addr vx,vy
CE ??
_
CF rem-double/2addr vx,vy
CF ??
_
D0 add-int/lit16 vx,vy,lit16
D0 ?? ?? ??
_
D1 sub-int/lit16 vx,vy,lit16
D1 ?? ?? ??
_
D2 mul-int/lit16 vx,vy,lit16
D2 ?? ?? ??
_
D3 div-int/lit16 vx,vy,lit16
D3 ?? ?? ??
_
D4 rem-int/lit16 vx,vy,lit16
D4 ?? ?? ??
_
D5 and-int/lit16 vx,vy,lit16
D5 ?? ?? ??
_
D6 or-int/lit16 vx,vy,lit16
D6 ?? ?? ??
_
D7 xor-int/lit16 vx,vy,lit16
D7 ?? ?? ??
_
D8 add-int/lit8 vx,vy,lit8
D8 ?? ?? ??
_
D9 sub-int/lit8 vx,vy,lit8
D9 ?? ?? ??
_
DA mul-int/lit8 vx,vy,lit8
DA ?? ?? ??
_
DB div-int/lit8 vx,vy,lit8
DB ?? ?? ??
_
DC rem-int/lit8 vx,vy,lit8
DC ?? ?? ??
_
DD and-int/lit8 vx,vy,lit8
DD ?? ?? ??
_
DE or-int/lit8 vx,vy,lit8
DE ?? ?? ??
_
DF xor-int/lit8 vx,vy,lit8
DF ?? ?? ??
_
E0 shl-int/lit8 vx,vy,lit8
E0 ?? ?? ??
_
E1 shr-int/lit8 vx,vy,lit8
E1 ?? ?? ??
_
E2 ushr-int/lit8 vx,vy,lit8
E2 ?? ?? ??
_
E3 unused
E3 ??
_
E4 unused
E4 ??
_
E5 unused
E5 ??
_
E6 unused
E6 ??
_
E7 unused
E7 ??
_
E8 unused
E8 ??
_
E9 unused
E9 ??
_
EA unused
EA ??
_
EB unused
EB ??
_
EC unused
EC ??
_
ED unused
ED ??
_
EE execute-inline
EE ?? ?? ?? ?? ??
_
EF unused
EF ??
_
F0 invoke-direct-empty
F0 ?? ?? ?? ?? ??
_
F1 unused
F1 ??
_
F2 iget-quick vx,vy,offset
F2 ?? ?? ??
_
F3 iget-wide-quick
F3 ?? ?? ??
_
F4 iget-object-quick
F4 ?? ?? ??
_
F5 iput-quick vx,vy,offset
F5 ?? ?? ??
_
F6 iput-wide-quick
F6 ?? ?? ??
_
F7 iput-object-quick
F7 ?? ?? ??
_
F8 invoke-virtual-quick
F8 ?? ?? ?? ?? ??
_
F9 invoke-virtual-quick/range
F9 ?? ?? ?? ?? ??
_
FA invoke-super-quick
FA ?? ?? ?? ?? ??
_
FB invoke-super-quick/range
FB ?? ?? ?? ?? ??